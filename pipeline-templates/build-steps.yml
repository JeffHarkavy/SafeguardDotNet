steps:
- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: $(System.DefaultWorkingDirectory)\versionnumber.ps1
    arguments: $(Build.SourcesDirectory) $(semanticVersion) $(Build.BuildId) $$(isPrerelease)
  displayName: 'Setting build version'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'env | sort'
  displayName: 'Display environment variables'

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet tools'

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
  displayName: 'Restore NuGet packages'

# - task: AzureKeyVault@1
#   inputs:
#     azureSubscription: 'Azure.Infrastructure.CodeSigning'
#     KeyVaultName: 'CodeSigningCertificates'
#     SecretsFilter: '*'
#   displayName: 'Get code signing certificate from Azure Key Vault'
#   condition: and(succeeded(), eq(variables.isReleaseBranch, true))

# - powershell: |
#     $kvSecretBytes = [System.Convert]::FromBase64String("$(OneIdentity-CodeSigning)")
#     $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
#     $certCollection.Import($kvSecretBytes,$null,[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
#     $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12,"$(OneIdentity-CodeSigningCertPassword)")
#     $certpath = '$(Build.BinariesDirectory)/$(codeSigningCertFileName)'
#     Write-Verbose -Verbose $certpath
#     [System.IO.File]::WriteAllBytes($certpath, $protectedCertificateBytes)
#   displayName: 'Save code signing certificate to PFX file'
#   condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    # msbuildArgs: '/p:SignFiles=true /p:CertificatePassword=$(OneIdentity-CodeSigningCertPassword) /p:CertificatePath="$(Build.BinariesDirectory)/$(codeSigningCertFileName)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  displayName: 'Build $(solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    custom: 'pack'
    arguments: '$(Build.SourcesDirectory)\SafeguardDotNet\SafeguardDotNet.csproj --configuration $(buildConfiguration) --include-symbols -p:SymbolPackageFormat=snupkg --output $(Build.ArtifactStagingDirectory) --no-build --verbosity detailed'
  displayName: Building SafeguardDotNet NuGet packages

- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    custom: 'pack'
    arguments: '$(Build.SourcesDirectory)\SafeguardDotNet.BrowserLogin\SafeguardDotNet.BrowserLogin.csproj --configuration $(buildConfiguration) --include-symbols -p:SymbolPackageFormat=snupkg --output $(Build.ArtifactStagingDirectory) --no-build --verbosity detailed'
  displayName: Building SafeguardDotNet.BrowserLogin NuGet packages

- task: NuGetCommand@2
  inputs:
    command: 'custom'
    arguments: 'pack $(Build.SourcesDirectory)\SafeguardDotNet.GuiLogin\SafeguardDotNet.GuiLogin.nuspec -Properties Configuration=$(buildConfiguration) -Symbols -SymbolPackageFormat snupkg -OutputDirectory $(Build.ArtifactStagingDirectory) -Verbosity detailed -NonInteractive'
  displayName: Building SafeguardDotNet.GuiLogin NuGet packages

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'SafeguardDotNet'
  displayName: 'Publishing the artifacts'
